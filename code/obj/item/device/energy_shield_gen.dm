/obj/item/shieldwallgen
	name = "Energy-Shield Generator"
	desc = "Organic matter can pass through the shields generated by this generator. Can be secured to the ground using a wrench."
	icon = 'icons/obj/device.dmi'
	icon_state = "cloakgen_off"
	density = 0
	opacity = 0
	anchored = 0
	w_class = 2.0
	pressure_resistance = 2*ONE_ATMOSPHERE
	var/list/tiles = new/list()
	var/active = 0
	var/range = 1
	var/secured = 0
	var/broken_num = 0
	var/orientation = 1  //shield extend direction 0 = north/south, 1 = east/west
	//Save and regenerate weakened parts.

	// For whatever reason, disposing() is never called for this item. Ditto for the cloak generator (Convair880).
	Del()
		//DEBUG_MESSAGE("Del() was called for [src].")
		if (src.active)
			src.turn_off()
		..()
		return

	disposing()
		//DEBUG_MESSAGE("Disposing() was called for [src] at [log_loc(src)].")
		if (src.active)
			src.turn_off()
		..()
		return

	attackby(obj/item/W as obj, mob/user as mob)
		if(istype(W,/obj/item/wrench) && isturf(loc) && !istype(loc,/turf/space))
			if(secured)
				boutput(usr, "<span style=\"color:red\">You unsecure the generator.</span>")
				secured = 0
				playsound(src, "sound/items/Ratchet.ogg", 60, 1)
			else
				boutput(usr, "<span style=\"color:red\">You secure the generator.</span>")
				secured = 1
				playsound(src, "sound/items/Ratchet.ogg", 60, 1)

	attack_hand(mob/user as mob)
		if(secured)
			boutput(user, "<span style=\"color:red\">Its secured to the ground.</span>")
			return
		else
			return ..()

	verb/orientate()
		set src in view(1)
		if (!istype(usr,/mob/living)) return
		if (!isturf(loc))
			boutput(usr, "<span style=\"color:red\">You must place the generator on the ground to use it.</span>")
			return
		orientation = !orientation
		boutput(usr, "<span style=\"color:blue\">orientation set to : [orientation]</span>")
		if(active)
			turn_off()
			turn_on()

	verb/increase_range()
		set src in view(1)
		if (!istype(usr,/mob/living)) return
		if (!isturf(loc))
			boutput(usr, "<span style=\"color:red\">You must place the generator on the ground to use it.</span>")
			return
		range = min(range+1,3)
		boutput(usr, "<span style=\"color:blue\">Range set to : [range]</span>")
		if(active)
			turn_off()
			turn_on()

	verb/decrease_range()
		set src in view(1)
		if (!istype(usr,/mob/living)) return
		if (!isturf(loc))
			boutput(usr, "<span style=\"color:red\">You must place the generator on the ground to use it.</span>")
			return
		range = max(range-1,0)
		boutput(usr, "<span style=\"color:blue\">Range set to : [range]</span>")
		if(active)
			turn_off()
			turn_on()

	pickup(var/mob/living/M)
		if(active)
			turn_off()

	proc/turn_on()
		var/xa= -range-1
		var/ya= -range-1
		var/piece
		var/atom/A
		if (range == 0)
			var/obj/shieldwall/created = new /obj/shieldwall ( locate((src.x),(src.y),src.z) )
			created.icon_state = "enshieldw"
			tiles += created
			created.health_max = 16 - (range*2)
			created.health = 16 - (range*2)
		else 
			for (var/i = 0-range, i <= range, i++)
				if (orientation)
					A = locate((src.x+i),(src.y),src.z)
					xa++
					ya = 0
				else
					A = locate((src.x),(src.y+i), src.z)
					ya++
					xa = 0

				if (!A.density)
					var/obj/shieldwall/created = new /obj/shieldwall ( locate((src.x + xa),(src.y + ya),src.z) )
					if (xa == -range)
						created.dir = SOUTHWEST
					else if (xa == range)
						created.dir = SOUTHEAST
					else if (ya == -range)
						created.dir = NORTHWEST
					else if (ya == range)
						created.dir = NORTHEAST
					else if (orientation)
						created.dir = NORTH
					else if (!orientation)
						created.dir = EAST

					tiles += created
					created.health_max = 16 - (range*2)
					created.health = 16 - (range*2)

		icon_state = "cloakgen_on"
		src.anchored = 1
		src.active = 1

		var/list/breakables = tiles.Copy()
		for(var/i=0, i<broken_num, i++)
			if(!breakables.len) break
			var/obj/shieldwall/S = pick(breakables)
			S.broken = 1
			S.health = 0
			S.icon_state = "shield0"
			S.name = "weakened shield"
			spawn(200)
				if(S)
					S.health = S.health_max
					S.check()
			breakables -= S
		update_nearby_tiles()

	proc/turn_off()
		broken_num = 0
		for(var/obj/shieldwall/A in tiles)
			if(A.broken) broken_num++
			qdel(A)
		tiles = new/list()
		icon_state = "cloakgen_off"
		src.anchored = 0
		src.active = 0
		update_nearby_tiles()

	proc/update_nearby_tiles(need_rebuild)
		var/turf/simulated/source = loc
		if (istype(source))
			return source.update_nearby_tiles(need_rebuild)

		return 1

	verb/toggle()
		set src in view(1)
		if (!istype(usr,/mob/living)) return
		if (!isturf(loc))
			boutput(usr, "<span style=\"color:red\">You must place the generator on the ground to use it.</span>")
			return

		if (!active)
			turn_on()
			boutput(usr, "<span style=\"color:blue\">You activate the generator.</span>")
		else
			turn_off()
			boutput(usr, "<span style=\"color:blue\">You deactivate the generator.</span>")

/obj/shieldwall
	name = "shield"
	desc = "An energy shield."
	icon = 'icons/effects/effects.dmi'
	icon_state = "shieldw"
	density = 1
	opacity = 0
	anchored = 1
	layer=12
	var/health_max = 10
	var/health = 10
	var/broken = 0

	CanPass(atom/A, turf/T)
		if (broken) return 1
		if (ismob(A)) return 1
		if (isobj(A)) return 1
		else return 0

	ex_act(severity)
		if(broken) return
		health--
		check()

	meteorhit(var/obj/O as obj)
		if(broken) return
		health--
		check()
		playsound(src, "sound/effects/shieldhit2.ogg", 40, 1)
		qdel(O)

	proc/check()
		if(health <= 0)
			broken = 1
			icon_state = "shield0"
			name = "weakened shield"
			playsound(src, "sound/effects/shielddown2.ogg", 45, 1)
			spawn(450)
				health = health_max
				check()
		else
			broken = 0
			icon_state = "shieldw"
			name = "energy shield"